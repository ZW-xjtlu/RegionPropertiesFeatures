Message_i("log2_GeneExonNumber","log2(exon number of genes + 1)",message_env)
X[["log2_GeneExonNumber"]] <- log2(extractRegionProperty(x,
property=elementNROWS(exbg),
region=range(exbg),
nomapValue = nomapValue)+1)
message("Done\n")
rm(exbg)
Message_i("log2_TxIsoformNumber", "log2(transcript isoform number of genes + 1)",message_env)
txbg <- EnsureUCSC(transcriptsBy(transcriptdb,"gene"),x)
X[["log2_TxIsoformNumber"]] <- log2(extractRegionProperty(x,
property=elementNROWS(txbg),
region=range(txbg),
nomapValue = nomapValue)+1)
message("Done\n")
rm(txbg)
Message_i("MetaTxTopology", "meta-transcript topology",message_env)
X[["MetaTxTopology"]] <- suppressWarnings( topologyOnTranscripts(x, transcriptdb) )
X[["MetaTxTopology"]][is.na(X[["MetaTxTopology"]])] <- 0
message("Done\n")
message("#############################################################################################################################################\n")
message("##                                      The generation of region properties features has been completed.                                   ##\n")
message("#############################################################################################################################################\n")
indx_features <- match(as.character(seq_along(x)), names(x))
X <- X[indx_features,]
rm(indx_features)
rownames(X) <- NULL
return(X)
}
EnumerateRegionFeatures <- function(x,
region=NULL,
region_name=NULL,
region_info=NULL,
bsgenome=NULL,
gscores=NULL,
clusteringY=NULL,
flankSizes=(25*2^(0:6)),
ambiguityMethod=c("auto", "mean", "sum", "min", "max"),
nomapValue=c("0","NA","nearest"),
message_env){
ambiguityMethod <- match.arg(ambiguityMethod)
nomapValue <- match.arg(nomapValue)
#Length of x
if(is.null(region)){
Message_i("log2_length_x","log2(length of x + 1)", message_env)
X <- data.frame(
log2_length_x = log2(extractRegionLength(x) + 1)
)
message("Done\n")
#GC content  of x and its flanks
isCircular(x)[isCircular(x)] <- FALSE
if(!is.null(bsgenome)) {
Message_i("GC_x","GC content of x",message_env)
X[["GC_x"]] <- quiet(extractRegionLetterFrequency(trim(x), bsgenome))
message("Done\n")
for(i in flankSizes){
Message_i(paste0("GC_flank_",i,"_x"), paste0("GC content of x flanked by ", i,""), message_env)
X[[paste0("GC_flank_",i,"_x")]] <- quiet(extractRegionLetterFrequency(trim(x+i), bsgenome))
message("Done\n")
}
}
#Gscores of x and its flanks
if(!is.null(gscores)){
if(is.list(gscores)){
for(i in seq_along(gscores)){
Message_i(paste0(names(gscores)[i], "_x"),
paste0(names(gscores)[i], " scores of x"),
message_env)
X[[paste0(names(gscores)[i], "_x")]] <- quiet(extractRegionScores(trim(x), gscores[[i]], missingScores="zero"))
message("Done\n")
for(j in flankSizes){
Message_i(paste0(names(gscores)[i], "_flank_", j,"_x"),
paste0(names(gscores)[i]," scores of x flanked by ", j),
message_env)
X[[paste0(names(gscores)[i], "_flank_", j, "_x")]] <- quiet(extractRegionScores(trim(x+j), gscores[[i]], missingScores="zero"))
message("Done\n")
}
}
}else{
Message_i("gscores_x","gscores of x",message_env)
X[["gscores_x"]] <- quiet(extractRegionScores(trim(x), gscores, missingScores="zero"))
message("Done\n")
for(j in flankSizes){
Message_i(paste0("gscores_flank_", j, "_x"),
paste0("gscores of x flanked by ", j),
message_env)
X[[paste0("gscores_flank_", j, "_x")]] <- quiet(extractRegionScores(trim(x+j), gscores, missingScores="zero"))
message("Done\n")
}
}
}
#Count y on x and its flanks
if(!is.null(clusteringY)){
if(is.list(clusteringY)){
for(i in seq_along(clusteringY)){
Message_i(paste0("log2_", names(clusteringY)[i], "Count_x"),
paste0("log2(count of ", names(clusteringY)[i] ," on x + 1)"),
message_env)
X[[paste0("log2_", names(clusteringY)[i], "Count_x")]] <- quiet(log2(extractRegionYCount(x, clusteringY[[i]], normalize = FALSE) + 1))
message("Done\n")
for(j in flankSizes){
Message_i(paste0("log2_", names(clusteringY)[i], "Count_flank_",j, "_x"),
paste0("log2(count of ", names(clusteringY)[i] ," on x flanked by ", j," + 1)"),
message_env)
X[[paste0("log2_", names(clusteringY)[i], "Count_flank_",j, "_x")]] <- quiet(log2(extractRegionYCount(trim(x+j), clusteringY[[i]], normalize = FALSE) + 1))
message("Done\n")
}
#Quantify nearest distance of y to x
Message_i(paste0("log2_nearestDist2", names(clusteringY)[i], "_x"),
paste0("log2(x nearest distance to ", names(clusteringY)[i], " + 1)"),
message_env)
X[[paste0("log2_nearestDist2", names(clusteringY)[i], "_x")]] <- quiet(log2(extractRegionNearestDistToY(x, y=clusteringY[[i]]) + 1))
message("Done\n")
}
}else{
Message_i("log2_yCount_x", "log2(count of y on x + 1)",message_env)
X[["log2_yCount_x"]] <- quiet(log2(extractRegionYCount(x, clusteringY, normalize = FALSE) + 1))
message("Done\n")
for(i in flankSizes){
Message_i(paste0("log2_yCount_flank_",i,"_x"), paste0("log2(Count of y on x flanked by ", i," + 1)"),message_env)
X[[paste0("log2_yCount_flank_",i,"_x")]] <- quiet(log2(extractRegionYCount(trim(x+i), clusteringY, normalize = FALSE) + 1))
message("Done\n")
}
#Quantify nearest distance of y to x
Message_i("log2_nearestDist2y_x", "log2(nearest distance of y to x + 1)",message_env)
X[["log2_nearestDist2y_x"]] <- quiet(log2(extractRegionNearestDistToY(x, y=clusteringY) + 1))
message("Done\n")
}
}
return(X)
} else {
#Overlap region
Message_i(paste0("overlap_", region_name), paste0("Overlap with ", region_info),message_env)
X <- data.frame(
overlap_region=extractRegionOverlap(x, region, output.logical = FALSE, ambiguityMethod = ambiguityMethod)
)
names(X) = paste0("overlap_", region_name)
message("Done\n")
#Reset argument
if(ambiguityMethod == "auto") ambiguityMethod <- "mean"
#Length of region
Message_i(paste0("log2_length_", region_name),
paste0("log2(length of ", region_info ," + 1)"),
message_env)
if(length(X!=0)){
X[[paste0("log2_length_", region_name)]] <- log2(extractRegionLength(x, region,
nomapValue = nomapValue,
ambiguityMethod = ambiguityMethod) + 1)
}
message("Done\n")
#GC content of region
if(!is.null(bsgenome)) {
Message_i(paste0("GC_", region_name), paste0("GC content of ", region_info), message_env)
X[[paste0("GC_", region_name)]] <- quiet(extractRegionLetterFrequency(x, bsgenome, region,
nomapValue = nomapValue,
ambiguityMethod = ambiguityMethod))
message("Done\n")
}
#GScores on region
if(!is.null(gscores)){
if(is.list(gscores)){
for(i in seq_along(gscores)){
Message_i(paste0(names(gscores)[i], "_", region_name),
paste0(names(gscores)[i], " scores of ", region_info),
message_env)
X[[paste0(names(gscores)[i], "_", region_name)]] <- quiet(extractRegionScores(trim(x), gscores[[i]], region,
nomapValue = nomapValue,
ambiguityMethod = ambiguityMethod))
message("Done\n")
}
}else{
Message_i(paste0("gscores_", region_name),
paste0("gscores of ", region_info),
message_env)
X[[paste0("gscores_", region_name)]] <- quiet(extractRegionScores(trim(x), gscores, region,
nomapValue = nomapValue,
ambiguityMethod = ambiguityMethod))
message("Done\n")
}
}
#Count y on region
if(!is.null(clusteringY)){
if(is.list(clusteringY)){
for(i in seq_along(clusteringY)){
Message_i(paste0(names(clusteringY)[i], "Density_", region_name),
paste0("Density of ", names(clusteringY)[i], " on ", region_info),
message_env)
X[[paste0(names(clusteringY)[i], "Density_", region_name)]] <- quiet(extractRegionYCount(x, clusteringY[[i]], region, normalize = TRUE,
nomapValue = nomapValue,
ambiguityMethod = ambiguityMethod))
message("Done\n")
Message_i(paste0("log2_", names(clusteringY)[i], "Count_", region_name),
paste0("log2(count of ", names(clusteringY)[i], " on ", region_info," + 1)"),
message_env)
X[[paste0("log2_", names(clusteringY)[i], "Count_", region_name)]] <- quiet(log2(extractRegionYCount(x, clusteringY[[i]], region, normalize = FALSE,
nomapValue = nomapValue,
ambiguityMethod = ambiguityMethod) + 1))
message("Done\n")
Message_i(paste0("log2_nearestDist2", names(clusteringY)[i], "_", region_name),
paste0("log2(", region_info, " nearest distance to ", names(clusteringY)[i], " + 1)"),
message_env)
X[[paste0("log2_nearestDist2", names(clusteringY)[i], "_", region_name)]] <- quiet(log2(extractRegionNearestDistToY(x,
clusteringY[[i]],
nomapValue = nomapValue,
region, ambiguityMethod = ambiguityMethod) + 1))
message("Done\n")
}
}else{
Message_i(paste0("yDensity_", region_name),
paste0("density of y on ", region_info),
message_env)
X[[paste0("yDensity_", region_name)]] <- quiet(extractRegionYCount(x, clusteringY, region, normalize = TRUE,
nomapValue = nomapValue,
ambiguityMethod = ambiguityMethod))
message("Done\n")
Message_i(paste0("log2_yCount_", region_name),
paste0("log2(count of y on ", region_info ," + 1)"),
message_env)
X[[paste0("log2_yCount_", region_name)]] <- quiet(log2(extractRegionYCount(x, clusteringY, region, normalize = FALSE,
nomapValue = nomapValue,
ambiguityMethod = ambiguityMethod) + 1))
message("Done\n")
Message_i(paste0("log2_", region_name, "_nearestDist2y"),
paste0("log2(", region_info, " nearest distance to y + 1)"),
message_env)
X[[paste0("log2_", region_name, "_nearestDist2y")]] <- quiet(log2(extractRegionNearestDistToY(x,
clusteringY,
nomapValue = nomapValue,
region, ambiguityMethod = ambiguityMethod) + 1))
message("Done\n")
}
}
#Relative Position
Message_i(paste0("relativePOS_", region_name),
paste0("relative position of x on ", region_info),
message_env)
X[[paste0("relativePOS_", region_name)]] <- quiet(extractRegionRelativePosition(x, region,
nomapValue = nomapValue))
message("Done\n")
#Distance to region five prime end
Message_i(paste0("log2_dist5prime_", region_name),
paste0("log2(distance of x to 5' end of ", region_info, " + 1)"),
message_env)
X[[paste0("log2_dist5prime_", region_name)]] <- quiet(log2(extractDistToRegion5end(x, region,
nomapValue = nomapValue,
ambiguityMethod = ambiguityMethod) + 1))
message("Done\n")
#Distance to region three prime end
Message_i(paste0("log2_dist3prime_", region_name),
paste0("log2(distance of x to 3' end of ", region_info, " + 1)"),
message_env)
X[[paste0("log2_dist3prime_", region_name)]] <- quiet(log2(extractDistToRegion3end(x, region,
nomapValue = nomapValue,
ambiguityMethod = ambiguityMethod) + 1))
message("Done\n")
return(X)
}
}
EnsureUCSC <- function(range_object, x, clean_columns = TRUE){
if(all(seqlevelsStyle(range_object) %in% "UCSC")){
}else{
seqlevelsStyle(range_object) <- "UCSC"
range_object <- keepStandardChromosomes(range_object, pruning.mode = c("coarse"))
seqlevels(range_object) <- c(seqlevels(range_object),setdiff(seqlevels(x), seqlevels(range_object)))
new_seqlengths <- seqlengths(x)[names(seqlengths(range_object))]
names(new_seqlengths) <- names(seqlengths(range_object))
seqlengths(range_object) <- new_seqlengths
new_IsCircular <- isCircular(x)[names(isCircular(range_object))]
names(new_IsCircular) <- names(isCircular(range_object))
isCircular(range_object) <- new_IsCircular
}
if(clean_columns){
mcols(range_object) <- NULL
names(range_object) <- NULL
}
return(range_object)
}
calculate_total <- function(
transcriptdb,
bsgenome,
gscores,
clusteringY,
flankSizes,
annotBiotype,
extraRegions
){
f_num <- length(flankSizes)
if(is.null(gscores)){
s_num <- 0
}else if(is.list(gscores)){
s_num <- length(gscores)
}else{
s_num <- 1
}
if(is.null(bsgenome)){
I_genome <- 0
}else{
I_genome <- 1
}
if(is.null(clusteringY)){
c_num <- 0
}else if(is.list(clusteringY)){
c_num <- length(clusteringY)
}else{
c_num <- 1
}
self_feature_num <- 1+I_genome*(1+f_num)+s_num*(1+f_num)+c_num*(1+f_num+1)
region_feature_num <- (14+length(extraRegions))*(2+I_genome+s_num+3*c_num+3)
if(annotBiotype & is(transcriptdb, "EnsDb")){
additional_feature_num <- 3 + length(unique(transcripts(transcriptdb)$tx_biotype))
}else{
additional_feature_num <- 3
}
return(self_feature_num + region_feature_num + additional_feature_num)
}
Message_i <- function(Feature_name,
Feature_info,
message_env){
fcount <- get("count", envir = message_env)
message( paste0("Feature ", fcount, "/", get("total", envir = message_env),"; Name: '",
Feature_name, "'; Info: '", Feature_info, "'; Extracting ... "), append=FALSE )
assign("count", fcount+1, envir = message_env)
}
quiet <- function(x) {
sink(tempfile())
on.exit(sink())
invisible(force(suppressMessages(suppressWarnings(x))))
}
i <- "AaA"
message("## --------------------------------------------------------------------------------------------------------------------------------------- ##\n")
message("##                                               Extract properties of ", i ,paste0(paste0(rep(" ",65-nchar(i)), collapse = ""),"##\n")
message("## --------------------------------------------------------------------------------------------------------------------------------------- ##\n")
paste0(paste0(rep(" ",65-nchar(i)), collapse = "")
)
message("## --------------------------------------------------------------------------------------------------------------------------------------- ##\n")
message("##                                               Extract properties of ", i ,paste0(paste0(rep(" ",65-nchar(i)), collapse = "")),"##\n")
message("## --------------------------------------------------------------------------------------------------------------------------------------- ##\n")
message("## --------------------------------------------------------------------------------------------------------------------------------------- ##\n")
message("##                                               Extract properties of ", i ,paste0(paste0(rep(" ",67-nchar(i)), collapse = "")),"##\n")
message("## --------------------------------------------------------------------------------------------------------------------------------------- ##\n")
message("## --------------------------------------------------------------------------------------------------------------------------------------- ##\n")
message("##                                               Extract properties of ", i ,paste0(paste0(rep(" ",68-nchar(i)), collapse = "")),"##\n")
message("## --------------------------------------------------------------------------------------------------------------------------------------- ##\n")
library(RegionPropertiesFeatures)
library(RegionPropertiesFeatures)
?RegionPropertiesFeatures::genomeDerivedFeatures()
## Load the hg19 TxDb object for human transcript annotation (UCSC hg19):
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
## Define the Granges to be extracted:
set.seed(01)
X <- GRanges(rep(c("chr1", "chr2"), c(15, 15)),
IRanges(c(sample(11874:12127, 15), sample(38814:41527,15)), width=5),
strand=Rle(c("+", "-"), c(15, 15)))
## Extract the basic set of properties using the genomic regions defined in TxDb:
gfeatures <- genomeDerivedFeatures(X,
transcriptdb=TxDb.Hsapiens.UCSC.hg19.knownGene)
str(gfeatures)
library(RegionPropertiesFeatures)
install.packages("Pandoc")
?message
library(RegionPropertiesFeatures)
?message
## Load the hg19 TxDb object for human transcript annotation (UCSC hg19):
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
## Define the Granges to be extracted:
set.seed(01)
X <- GRanges(rep(c("chr1", "chr2"), c(15, 15)),
IRanges(c(sample(11874:12127, 15), sample(38814:41527,15)), width=5),
strand=Rle(c("+", "-"), c(15, 15)))
## Extract the basic set of properties using the genomic regions defined in TxDb:
gfeatures <- genomeDerivedFeatures(X,
transcriptdb=TxDb.Hsapiens.UCSC.hg19.knownGene)
str(gfeatures)
library(RegionPropertiesFeatures)
## Load the hg19 TxDb object for human transcript annotation (UCSC hg19):
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
## Define the Granges to be extracted:
set.seed(01)
X <- GRanges(rep(c("chr1", "chr2"), c(15, 15)),
IRanges(c(sample(11874:12127, 15), sample(38814:41527,15)), width=5),
strand=Rle(c("+", "-"), c(15, 15)))
## Extract the basic set of properties using the genomic regions defined in TxDb:
gfeatures <- genomeDerivedFeatures(X,
transcriptdb=TxDb.Hsapiens.UCSC.hg19.knownGene)
str(gfeatures)
?extractRegionLength
library(GenomicRanges)
library(RegionPropertiesFeatures)
## Build the query GRanges object:
x_gr <- GRanges(rep(c("chr1", "chr2"), c(5, 15)),
IRanges(c(sample(11874:12127, 5), sample(38814:41527,15)), width=100),
strand=Rle(c("+", "-"), c(5, 15)))
x_gr
## The region GRanges or GRangesList object:
exons_gr <- GRanges(c("chr1","chr2","chr2"),
IRanges(start=c(11874,38814,45440),end=c(12227,41627,46588)),
strand=c("+","-","-"))
genes_grl <- GRangesList(gene1=exons_gr[1],gene2=exons_gr[c(2,3)])
## Extract lengths of the query:
extractRegionLength(x_gr)
## Extract length of the exon overlapped by the query:
extractRegionLength(x_gr, exons_gr)
## Extract exonic length of the genes overlapped by the query:
extractRegionLength(x_gr, genes_grl)
## Exract self defined property on exons overlapped by the query:
exons_property <- c(1,6,8)
extractRegionProperty(x_gr, exons_gr, exons_property)
## Extract lengths of the query:
expect_that(
extractRegionLength(x_gr),
isa("numeric")
)
library(GenomicRanges)
library(testthat)
library(RegionPropertiesFeatures)
expect_that(
extractRegionLength(x_gr),
isa("numeric")
)
?expect_that
expect_that(extractRegionLength(x_gr),isa("numeric"))
## Extract length of the exon overlapped by the query:
extractRegionLength(x_gr, exons_gr)
expect_that(extractRegionLength(x_gr),is_a("numeric"))
extractRegionLength(x_gr)
?is_a
expect_that(extractRegionLength(x_gr),is_a(numeric))
expect_that(extractRegionLength(x_gr),is_a("numeric"))
expect_that(extractRegionLength(x_gr),is_a("integer"))
## Extract length of the exon overlapped by the query:
expect_that(extractRegionLength(x_gr, exons_gr),is_a("integer"))
## Extract length of the exon overlapped by the query:
expect_that(extractRegionLength(x_gr, exons_gr), is_a("numeric"))
extractRegionLength(x_gr, genes_grl)
expect_that(extractRegionProperty(x_gr, exons_gr, exons_property), is_a("numeric"))
extractRegionYCount(x_gr, x_gr, exons_gr)
expect_that(extractRegionYCount(x_gr, x_gr, exons_gr), is_a("integer"))
expect_that(extractRegionYCount(x_gr, x_gr, exons_gr), is_a("numeric"))
y_gr <- GRanges(rep(c("chr1", "chr2"), c(50, 50)),
IRanges(c(sample(11874:12127, 50),
sample(38814:41527,50)), width=1),
strand=Rle(c("+", "-"), c(50, 50)))
extractRegionNearestDistToY(x_gr, y_gr)
expect_that(extractRegionNearestDistToY(x_gr, y_gr))
expect_that(extractRegionNearestDistToY(x_gr, y_gr), is_a("numeric"))
expect_that(extractDistToRegion5end(x_gr, exons_gr), is_a("integer"))
expect_that(extractDistToRegion3end(x_gr, exons_gr), is_a("integer"))
expect_that(extractDistToRegion5end(x_gr, exons_gr), is_a("numeric"))
expect_that(extractDistToRegion3end(x_gr, exons_gr), is_a("numeric"))
expect_that(extractRegionLength(x_gr), is_a("integer"))
expect_that(extractRegionLength(x_gr, exons_gr), is_a("numeric"))
expect_that(extractRegionLength(x_gr, exons_gr), is_a("numeric"))
exons_property <- c(1,6,8)
expect_that(extractRegionProperty(x_gr, exons_gr, exons_property), is_a("numeric"))
expect_that(extractRegionYCount(x_gr, x_gr, exons_gr), is_a("numeric"))
expect_that(extractRegionNearestDistToY(x_gr, y_gr), is_a("numeric"))
expect_that(extractDistToRegion5end(x_gr, exons_gr), is_a("numeric"))
expect_that(extractDistToRegion3end(x_gr, exons_gr), is_a("numeric"))
BiocManager::install("EnsDb.Hsapiens.v75")
EnsDb.Hsapiens.v75
library(EnsDb.Hsapiens.v75)
BiocManager::install("EnsDb.Hsapiens.v75")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("EnsDb.Hsapiens.v75")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("EnsDb.Hsapiens.v75")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("EnsDb.Hsapiens.v75")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("EnsDb.Hsapiens.v75")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("EnsDb.Hsapiens.v75")
library(EnsDb.Hsapiens.v75)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biocCheck")
library(RegionPropertiesFeatures)
library(BiocCheck)
BiocCheck::BiocCheck("RegionPropertiesFeatures")
BiocCheck::BiocCheck("../RegionPropertiesFeatures")
expect_that(extractDistToRegion3end(x_gr, exons_gr), is_a("numeric"))
library(testthat)
expect_that(extractDistToRegion3end(x_gr, exons_gr), is_a("numeric"))
library(GenomicRanges)
library(testthat)
library(RegionPropertiesFeatures)
x_gr <- GRanges(rep(c("chr1", "chr2"), c(5, 15)),
IRanges(c(sample(11874:12127, 5), sample(38814:41527,15)), width=100),
strand=Rle(c("+", "-"), c(5, 15)))
exons_gr <- GRanges(c("chr1","chr2","chr2"),
IRanges(start=c(11874,38814,45440),end=c(12227,41627,46588)),
strand=c("+","-","-"))
genes_grl <- GRangesList(gene1=exons_gr[1],gene2=exons_gr[c(2,3)])
y_gr <- GRanges(rep(c("chr1", "chr2"), c(50, 50)),
IRanges(c(sample(11874:12127, 50),
sample(38814:41527,50)), width=1),
strand=Rle(c("+", "-"), c(50, 50)))
expect_that(extractRegionLength(x_gr), is_a("integer"))
expect_that(extractRegionLength(x_gr, exons_gr), is_a("numeric"))
expect_that(extractRegionLength(x_gr, exons_gr), is_a("numeric"))
exons_property <- c(1,6,8)
expect_that(extractRegionProperty(x_gr, exons_gr, exons_property), is_a("numeric"))
expect_that(extractRegionYCount(x_gr, x_gr, exons_gr), is_a("numeric"))
expect_that(extractRegionNearestDistToY(x_gr, y_gr), is_a("numeric"))
expect_that(extractDistToRegion5end(x_gr, exons_gr), is_a("numeric"))
expect_that(extractDistToRegion3end(x_gr, exons_gr), is_a("numeric"))
library(RegionPropertiesFeatures)
BiocCheck::BiocCheck("../RegionPropertiesFeatures")
